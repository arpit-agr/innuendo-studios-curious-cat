---
import {Icon} from 'astro-icon/components';
---

<!-- https://github.com/withastro/starlight/blob/4eff9faaa12f1bf3e39dc0aaa60f16943d43457a/packages/starlight/components/Search.astro -->
<site-search>
	<button
		class="text-step-00 leading-flat font-medium"
		data-open-modal
		disabled
		aria-keyshortcuts="/"
	>
		<Icon name="tabler:search" aria-hidden="true" />
		<span>Search</span>
		<kbd aria-hidden="true">/</kbd>
	</button>

	<dialog aria-label="Search">
		<div class="dialog-frame">
			{
				import.meta.env.DEV ? (
					<div class="search-container-dev-env">
						<p class="text-balance">
							<Icon name="tabler:alert-triangle" />
							Search is only available in production builds. Try building and
							previewing the site to test it out locally.
						</p>
					</div>
				) : (
					<div class="search-container">
						<div id="site__search" />
					</div>
				)
			}
			<button data-close-modal>Close</button>
		</div>
	</dialog>
</site-search>

<script>
	class SiteSearch extends HTMLElement {
		constructor() {
			super();
			const openBtn = this.querySelector<HTMLButtonElement>(
				'button[data-open-modal]'
			)!;
			const closeBtn = this.querySelector<HTMLButtonElement>(
				'button[data-close-modal]'
			)!;
			const dialog = this.querySelector('dialog')!;
			const dialogFrame = this.querySelector('.dialog-frame')!;

			/** Close the modal if a user clicks on a link or outside of the modal. */
			const onClick = (event: MouseEvent) => {
				const isLink = 'href' in (event.target || {});
				if (
					isLink ||
					(document.body.contains(event.target as Node) &&
						!dialogFrame.contains(event.target as Node))
				) {
					closeModal();
				}
			};

			const openModal = (event?: MouseEvent) => {
				dialog.showModal();
				document.body.toggleAttribute('data-search-modal-open', true);
				this.querySelector('input')?.focus();
				event?.stopPropagation();
				window.addEventListener('click', onClick);
			};

			const closeModal = () => dialog.close();

			openBtn.addEventListener('click', openModal);
			openBtn.disabled = false;
			closeBtn.addEventListener('click', closeModal);

			dialog.addEventListener('close', () => {
				document.body.toggleAttribute('data-search-modal-open', false);
				window.removeEventListener('click', onClick);
			});

			// Listen for `/` keyboard shortcut.
			window.addEventListener('keydown', e => {
				if (e.key === '/') {
					dialog.open ? closeModal() : openModal();
					e.preventDefault();
				}
			});

			window.addEventListener('DOMContentLoaded', () => {
				if (import.meta.env.DEV) return;
				const onIdle = window.requestIdleCallback || (cb => setTimeout(cb, 1));
				onIdle(async () => {
					// @ts-expect-error â€” Missing types for @pagefind/default-ui package.
					const {PagefindUI} = await import('@pagefind/default-ui');
					new PagefindUI({
						element: '#site__search',
						baseUrl: import.meta.env.BASE_URL,
						bundlePath:
							import.meta.env.BASE_URL.replace(/\/$/, '') + '/pagefind/',
						resetStyles: false,
						pageSize: 4,
						showImages: false,
						showSubResults: false,
						excerptLength: 20
					});
				});
			});
		}
	}
	customElements.define('site-search', SiteSearch);
</script>
