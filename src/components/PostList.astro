---
import type {Page} from 'astro';
import type {CollectionEntry} from 'astro:content';
import {transformLineBreaks, transformLinks} from '../utils';
import path from 'path';
import FormattedDate from './FormattedDate.astro';
import {Icon} from 'astro-icon/components';
import {Image} from 'astro:assets';
import avatar from '../images/avatar.jpg';
import ReplyMedia from './ReplyMedia.astro';

interface Props {
	page: Page<{}>;
	posts: CollectionEntry<'answers'>[];
}

const {page, posts} = Astro.props;

// Collect all IDs from the current page's posts
const currentPagePostIds = posts.map(({data}) => data.id);
---

<h2 id="questions-and-answers" class="visually-hidden">
	Questions and Answers
</h2>
<ol
	class="flow flow-space-m"
	role="list"
	aria-labelledby="questions-and-answers"
>
	{
		posts.map(({data}, index) => {
			const postId = data.id;
			const postAnchorLink = `#${data.id}`;
			const postAnchorLabel = `Jump link to question ${index + 1}`;
			const commentContent = data.comment;
			const replyContent = data.reply;

			// Transform line breaks and links
			const transformedComment = transformLineBreaks(commentContent);
			const transformedReply = transformLineBreaks(
				transformLinks(replyContent)
			);

			const mediaUrl = data.media?.img;
			const mediaExtension = mediaUrl ? path.extname(mediaUrl) : null;

			/* The media for postId 1314471210 has been deleted from Tenor so specifically for that post a replacement image is provided */
			const mediaPath =
				postId !== '1314471210'
					? `/src/images/posts/${postId}${mediaExtension}`
					: '/src/images/deleted.png';

			const mediaLoadingStrategy = index + 1 < 7 ? 'eager' : 'lazy';
			const replyDate = data.timestamp;
			const hasResponse = !!data.in_response_to;
			const responsePostId = data.in_response_to?.id;
			const responseComment = data.in_response_to?.comment;

			// Check if the responsePostId is present on the current page
			const isResponseInCurrentPage =
				responsePostId && currentPagePostIds.includes(responsePostId);

			// Generate the href for the response
			const responseHref = isResponseInCurrentPage
				? `#${responsePostId}`
				: `${page.url.next ?? ''}#${responsePostId}`; // Link to next page if not found

			return (
				<li id={postId} class="post">
					<article>
						<div class="post-header repel">
							<a
								class="jump-link text-step-000 tracking-wide leading-flat"
								href={postAnchorLink}
								aria-label={postAnchorLabel}
							>
								<Icon name="tabler:hash" aria-hidden="true" />
							</a>
							<p class="text-step-000 tracking-wide leading-flat">
								<span class="visually-hidden">Published on </span>
								<FormattedDate pubDate={replyDate} />
							</p>
						</div>
						{/* main */}
						<div class="post-main" data-pagefind-body>
							{/* comment */}
							<div class="comment grid">
								<span
									class="anonymous"
									aria-hidden="true"
									data-hover-popover="comment"
									data-pagefind-ignore="all"
								>
									A
								</span>
								<div class="flow flow-space-3xs">
									<div class="comment-text heading-4 flow">
										<p class="visually-hidden">Anonymous commented:</p>
										<Fragment set:html={transformedComment} />
									</div>
									{hasResponse && (
										<div
											class="in-response-to text-step-00"
											data-pagefind-ignore="all"
										>
											<Icon
												name="tabler:corner-down-right"
												aria-hidden="true"
											/>
											<p class="line-clamp-1">
												in response to
												<a href={responseHref}>{responseComment}</a>
											</p>
										</div>
									)}
								</div>
							</div>
							{/* reply */}
							<div class="reply grid">
								<div class="avatar-wrapper" data-hover-popover="reply">
									<Image
										class="avatar"
										src={avatar}
										alt=""
										quality="low"
										loading={mediaLoadingStrategy}
									/>
								</div>
								{!!replyContent && (
									<div class="reply-text flow flow-space-xs">
										<p class="visually-hidden">Ian replied:</p>
										<Fragment set:html={transformedReply} />
									</div>
								)}
								{!!mediaUrl && (
									<ReplyMedia
										imagePath={mediaPath}
										loading={mediaLoadingStrategy}
									/>
								)}
							</div>
						</div>
					</article>
				</li>
			);
		})
	}
</ol>

<div
	id="comment-popover"
	class="text-step-0000 tracking-wider leading-flat"
	popover
>
	Anon commented:
</div>
<div
	id="reply-popover"
	class="text-step-0000 tracking-wider leading-flat"
	popover
>
	Ian replied:
</div>

<script>
	let commentPopover = document.querySelector(
		'#comment-popover'
	) as HTMLElement | null;
	let replyPopover = document.querySelector(
		'#reply-popover'
	) as HTMLElement | null;

	function handlePopover(
		selector: string,
		popover: HTMLElement | null,
		anchorName: string
	) {
		document.querySelectorAll(selector).forEach(anchor => {
			const anchorElement = anchor as HTMLElement;
			anchorElement.onmouseenter = () => {
				anchorElement.style.setProperty('anchor-name', anchorName);
				popover?.showPopover();
			};
			anchorElement.onmouseleave = () => {
				anchorElement.style.removeProperty('anchor-name');
			};
		});
	}

	// Use for both comment and reply
	handlePopover(
		'[data-hover-popover="comment"]',
		commentPopover,
		'--comment-anchor'
	);
	handlePopover('[data-hover-popover="reply"]', replyPopover, '--reply-anchor');
</script>
